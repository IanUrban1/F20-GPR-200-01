#version 300 es
//Assistance from Mr.Buckstein-> class notes   
//Assistance from https://people.inf.elte.hu/plisaai/pdf/David%20Wolff%20-%20OpenGL%204.0%20Shading%20Language%20Cookbook%20(2).pdf

#ifdef GL_ES
precision highp float;
#endif
 

layout (location = 0) out vec4 rtFragColor;
 
uniform sampler2D uTex;	  
  
in vec2 vTexCoord;  
in vec4 vNormal;
 
 
vec4 pass2()
{ 
    //height of screen in pixels
    float height = 800.0;
    
    //(dy is the height of a texel in texture coordinates.)
    float dy = 1.0 / height;
    
    //offsets for Gaussian blur
    //the array of offsets from the pixel being blured
    //We read pixels from the texture created in the first pass,
	//offset in the vertical direction by the amounts in the PixOffset array.
	float PixOffset[10] =
	float[](0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);
    
    //weights Gaussian blur
    //an array of normalized Gaussin weights	
    float Weight[10] = float[](0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25);
    
    //We sum using weights from the Weight array.
    vec4 sum = texture(uTex, vTexCoord) * Weight[0];
    for(int i = 1; i < 10; i++)
    {
        //We sum in both directions at the same time, 
		//a distance of four pixels in each vertical direction.
     	sum += texture(uTex, vTexCoord + vec2(0.0, PixOffset[i]) * dy) * Weight[i];
        
        sum += texture(uTex, vTexCoord - vec2(0.0, PixOffset[i]) * dy) * Weight[i];
        
    }
    //returning the calculated sum of the directions 
    return sum;
}


//We accumulate the weighted, 
//horizontal sum using the texture from the second pass. 
//Thereby, we are creating a sum over a 9x9 pixel area 
//around the destination pixel. 
vec4 pass3()
{
    float width = 450.0;
    
    //(dx is the height of a texel in texture coordinates.)
 	float dx = 1.0 / width;
    
    //offsets for Gaussian blur
	float PixOffset[10] =
	float[](0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);
    
    //weights Gaussian blur
	float Weight[10] = float[](0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25);
    
    
    //incorporating the sums produced in the second pass 
	//into our overall weighted sum
    vec4 val  = texture(uTex, vTexCoord);
    
    vec4 sum = texture(uTex, vTexCoord) * Weight[0];
    for(int i = 1; i < 10; i++)
    {
        //We sum in both directions at the same time, 
		//a distance of four pixels in each horizontal direction.
     	sum+= texture(uTex, vTexCoord + vec2(0.0, PixOffset[i]) * dx) * Weight[i];
        
        sum+= texture(uTex, vTexCoord - vec2(0.0, PixOffset[i]) * dx) * Weight[i];
        
    }
    //the output color goes to the default framebuffer 
	//to make up the final result.
    return val + sum;	
}
  
void main()
{    

	//making a temp vec4 to set the passes to
	vec4 blurReturner = pass2() + pass3();
	//set rtFragColor to the getBrightPass to get the pass data 
	rtFragColor = blurReturner; 
}
