//sources used: 
//https://ebookcentral-proquest-com.cobalt.champlain.edu/lib/champlain/reader.action?docID=948515

//gausin blur
//first blur pass
//pass2 uses the weighted vertical sum of the Gaussian blur operation, 
//and stores the results in yet another texture.  
vec4 pass2(in sViewport vp)
{
    
    //height of screen in pixels
    float height = 800.0;
    
    //(dy is the height of a texel in texture coordinates.)
    float dy = 1.0 / height;
    
    //offsets for Gaussian blur
    //the array of offsets from the pixel being blured
    //We read pixels from the texture created in the first pass,
	//offset in the vertical direction by the amounts in the PixOffset array.
	float PixOffset[10] =
	float[](0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);
    
    //weights Gaussian blur
    //an array of normalized Gaussin weights	
    float Weight[10] = float[](0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25);
    
    //We sum using weights from the Weight array.
    vec4 sum = texture(iChannel0, vp.uv) * Weight[0];
    for(int i = 1; i < 10; i++)
    {
        //We sum in both directions at the same time, 
		//a distance of four pixels in each vertical direction.
     	sum += texture(iChannel0, vp.uv + vec2(0.0, PixOffset[i]) * dy) * Weight[i];
        
        sum += texture(iChannel0, vp.uv - vec2(0.0, PixOffset[i]) * dy) * Weight[i];
        
    }
    //returning the calculated sum of the directions 
    return sum;
}


void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    //fragColor += pass3(vp); --use pass3 in the end
    //check order of buffers to find out why it isn't working
    fragColor += pass2(vp);
}