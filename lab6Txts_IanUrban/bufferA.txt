// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//define convultion --look this up, dont read buffer a from buffer a, this is a no bueno

//cubemap stuff

//Had assistance from Jake Siede

//-----------------------------------------------------------
//Calculation functions

vec4 cubeMapRot(in sRay ray, float time)
{
    //creating a vec3 to keep track of location
    vec3 cubeLoc = ray.direction.xyz;
    
    //creating a mat3 or 3 by 3 
    //single-precision floating-point matrix
    //to generate rotation
 	mat3 rotation;
    
    //pass in time for the x-value to generate a constant rotation
    float cosVar = cos(time);
    float sinVar = sin(time);
    
    //generating the rotation of the cubemap
    rotation = mat3(cosVar, 0.0, -sinVar, 0.0, 1.0, 0.0, sinVar, 0.0, cosVar);
    
    //set cubeLoc equal to it self multiplied by the rotation
    //to add the constant rotation effect to cubeLoc
    cubeLoc = rotation * cubeLoc;
    
    //set the rotating texture equal to a vec4 so it
    //can be returned
    vec4 rotVec4 = texture(iChannel0, cubeLoc);
    
    
    //returning that rotation
    return rotVec4;
}



//------------------------------------------------------------
// RENDERING FUNCTIONS


// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    float time = iTime;
    
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return asPoint(sBasis(vp.viewportPoint.xy, -vp.viewportPoint.z));
    
    //return texture(iChannel0, loc);
    
    
    
    return cubeMapRot(ray, time);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
