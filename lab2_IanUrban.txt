//makes all uses of keyword colorRGB a vec3
#define colorRGB vec3

//makes all uses of keyword colorRGBA a vec4
#define colorRGBA vec4
//Important: Got help from Mr. Buckstein, the following videos, and openGL reading
//https://www.youtube.com/watch?v=u5HAYVHsasc(basic circle creation),
//https://www.youtube.com/watch?v=GgGBR4z8C9o(more advance circle stuff),
//https://www.youtube.com/watch?v=bigjgiavOM0&(squares and rectangle creation),
//https://www.youtube.com/watch?time_continue=1&v=qVIDtjVbPcY&feature=emb_logo(have to turn on subs he is russian, step function),
//https://www.youtube.com/watch?time_continue=16&v=MYFXfLFrUcA&feature=emb_logo(step and smoothstep)
//https://www.youtube.com/watch?time_continue=1&v=T20CHbPPCFs&feature=emb_logo(borrowed code from this guy(lines borrowed: 61, 62, 65, 83, 100), I changed as much as I could of it to make it my own and commented it a lot to make up for code that wasn't changed)
//https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf

//in = input, out=output
vec4 myEffect0(in vec2 fragCoord, in vec2 resolution)
{
   
   //grey return vec4(0.5);
   //red return vec4(1.0, 0.0, 0.0, 1.0);
   //orange return vec4(1.0, 0.5, 0.0, 1.0);
    
    //color is 0 to 1 and coord is 0 to res
    //Red and Blue ->horizontal
    //Green and Alpha ->vert
    //return vec4(fragCoord, fragCoord);
    
    
    //fix: red and green only:
    //Red-> horizontal
    //Green ->vertical
    //return vec4(fragCoord, 0.0, 1.0);
    
    //Only use iResolution and other unions in main 
    //unless you make them parameters in the function
    //final: red-green gradient
    //vec2 uv = fragCoord / iResolution.xy;
    //return vec4(uv,0.5,1.0);
    
    vec2 uv = fragCoord / resolution;
    //creating returned color using uv
    vec3 color = vec3(uv, 0.25);
    //setting the alpha to 1 so its fully visable
    float alpha = 1.0;
    
    //fun other gradients
    return vec4(color, alpha);
    //return vec4(0.5, uv, 1.0);
    
}

//genFType = general float type
//function used to create the cordinates for the checkerboard squares
vec3 squFCB(vec2 uv, vec2 sCord, vec2 eCord, vec3 color)
{
    //using the step function to get the generated squares
    //left bottom and top right cordinates
    //sCord = starting cord or the bottom left cordinate
    //eCord = end cord or the ending cordinate
    //step returns 0.0 if x <edge(edge of screen) if it does it returns 1
    vec2 leftBot = step(sCord, uv);
    vec2 rightTop = step(eCord, 1.0 - uv);
  
    //return color and xy cords for the squares
 	return color *(leftBot.x * leftBot.y * rightTop.x * rightTop.y);
}


vec4 myEffect1(in vec2 fragCoord, in vec2 resolution)
{
    //creating vecs for later use
    vec3 toScreen;
    
    //creating a vec4 fragColor to be the var to be returned
    vec4 fragColor;
    
    vec2 uv = fragCoord.xy/resolution;
    
    
    //number of rows an cols
	const int cBP = 11;
    //tells how many squares we generating
    float incre = 1.0 / float(cBP);
    
    //a bool that switchs the color from black(false) 
    //to white(true)
    bool colorChanger = false;
    
    //forloop for creaing all the squares
    for(int i = 0; i < cBP; i++)
     {
     	for(int j = 0; j < cBP; j++)
         {
            //a vec3 that holds + takes in all the square data
            //also incre with j to create bottom cords of squares
            //using incre with j to create the top cords of squares
            //adding 1 to j and i to move to the next square
            //subtracting 1 by incre to switch the x and y cordinates so that it fill up the screen
            //and not just part of the screen
         	vec3 squareTime = squFCB(uv,vec2(incre * float(j), incre* float(i)), vec2(1.0 - incre* float(j+1), 1.0 - incre * float(i+1)), vec3(colorChanger));
            
             //using mix to put square on screen
            toScreen = mix(toScreen, squareTime, squareTime);
            //setting bool colorChanger to what it isn't, this then changes the color
            //from either black(false) or white(true)
            colorChanger = !colorChanger;
         }
     }
    
    //casting/turning toScreen to a vec4 so fragColor can be set to it
    fragColor = vec4(vec3(toScreen), 1.0);
    
    
    //returning fragColor
    return fragColor;
}


vec4 myEffect2(in vec2 fragCoord, in vec2 resolution, float time)
{   
    //creating vec4s for the circle, circle's color
    //and the background color
	vec4 fragCircle;
    vec4 fragColorC;
    vec4 fragColorB;
    
    
	vec2 uv = fragCoord.xy/resolution;
    
    //position of cirlcle aka center
	uv -= 0.5;
    
	uv.x *= resolution.x/resolution.y;
    
    //definning the diameter and radius of circle
	float diameter = length(uv);
    
	float radius = 0.3;

    //using smoothstep to assit in the creation of the circle
	float circle = smoothstep(radius, radius - 0.02, diameter);
    
    //floats for creating a false infinty
    float x = 1000.0;
    float y = 1000.0;
    //res = result, used for the power function below and the forloop
    float res;
    
    //using pow function to create false infinity
    res = pow(x,y);
    
    //for loop for growing and shrinking the circle
    //via changing the diameter of the circle
    //Couldn't quite get this to work :(
   /* for(int i = 0; i < res; i++)
    {	
        if(diameter = length(uv)
           {
               diameter = length(uv + 1);
           } else if (diameter = length(uv + 1)
             	{
                    diameter = length(uv);
                }
           
    }*/
    
                    
    //casting circle to a vec4 so it can be returned
	fragCircle = vec4(vec3(circle), 1.0);
   
    //color for circle
    vec3 circleCol = 1.0 + 2.0* sin(time+uv.xyx+vec3(0,3,2));
    
    //color for background
    vec3 backgroundCol = vec3(0.5,2,1);
    
    //casting backgroundcol to vec4 so it can be returned
    fragColorB = vec4(backgroundCol, 1.0);
    
    //combinting the circle and its color
    fragColorC = fragCircle + vec4(vec3(0.1/ circleCol), 1.0);
    
	//returning the circle with all its components and the background color
    //couldn't quite figure out how to assign the circleCol to the actual circle :(
    //this one was difficult for me
	return fragColorC + fragColorB;

}


//tripppy tangent effects ooooooo so trippy, its tan time
vec4 myEffect3(in vec2 fragCoord, in vec2 resolution, float time)
{
    //vec4 for later
    vec4 fragColor;
    vec4 fragColor1;
    
    vec2 uv = fragCoord/resolution;
    
    //creating a ve3 cirlce color and setting it
    vec3 circleColor = vec3(0.0);
    //using circleColor I created the three different varients:(rgb)
    //Each one creates their own different cirle with different colors
    //Using abs and tan each circle moves in and out(depending on speed (number multipled by time)
    //this creates a trippy thing where three different cirles are all moving at the same time
    //and because of this time difference, the size of each cirle is different
    //this then combined with the vec3 col warps the cirles into eclipes 
    //and creates myEffect4
    circleColor.r += abs(0.1 + length(uv) - 0.8 * abs(tan(time *0.12/9.0)));
    
    circleColor.g += abs(0.1 + length(uv) - 0.8 * abs(tan(time *0.9/4.0)));
    
    circleColor.b += abs(0.1 + length(uv) - 0.8 * abs(tan(time *0.6/6.0)));
    
    //creating the trippy effect using a tangent wave
    //vec3(1,3,2) is used to define color
    //time parameter is used as a iTime uniform
    //tan is the type of wave being used
    vec3 col = 1.0 + 1.0* tan(time+uv.xyx+vec3(1,3,2));
    
    
    //casting tangent wave to a vec4 so it can be returned as fragColor
    fragColor = vec4(0.1/col, 1.0);
    //casting trippy tan cirles to a vec4 so it can be returned a fragColor1
    fragColor1 = vec4(vec3(circleColor), 1.0);
    
    //return both fragColors to get both tangent effects :)
    return fragColor + fragColor1;
}



//contructing any array
//float myArray[6] = float[6](0.0, 1.0, 2.0, 42.0, 65.0, 9001.0);
//myArray[0] = 2.0;

void mainImage( out vec4 fragColor, in vec2 fragCoord)
{
    //All my effect functions
    
    //myEffect0, returns the good old fashion yellow, red, green, and black
    //fragColor = myEffect0(fragCoord, iResolution.xy);
    
    
    //myEffect1 creates a classic chess board using the mix and step keywords
    //fragColor = myEffect1(fragCoord, iResolution.xy);
    
    //myEffect2 creates a teal background with a everchanging colored cirle
    //that grows and shrinks
    //fragColor = myEffect2(fragCoord, iResolution.xy, iTime);
    
    //myEffect3 creates a trippy tangent wave with a effect
    fragColor = myEffect3(fragCoord, iResolution.xy, iTime);
    
    
    
    
    //R,G,B,A = [0,1];
    //fragColor = vec4(1.0, 1.0, 1.0, 1.0); gives us white
        
 	//fragColor = myEffect0(fragCoord);   
 
    
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
   //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
}