//Got assistance from Mr.Buckstein
//Also referced code from: https://raytracing.github.io/books/RayTracingInOneWeekend.html#addingasphere/ray-sphereintersection
//Aswell as: https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.60.pdf
//https://www.youtube.com/watch?v=u5HAYVHsasc(basic circle creation),
//https://www.youtube.com/watch?v=GgGBR4z8C9o(more advance circle stuff),

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}


// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

vec4 rayMath(float t)
{
   vec4 dir;
   vec4 orig;
    
   return orig + t*dir;   
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{  
    
   //creating local vars for later
   float t;
   vec4 returner;
   vec4 color;
     
    
    t = 0.5*(rayDirection.y + 1.0);
    
   	//The sign keyword returns 1.0 if x > 0,
    //0.0 if x = 0, or -1.0 if x < 0.
    //It's used implace of blended value
    sign(t);
    
    //casting t to a vec4 so it can be returned
    returner = vec4(vec3(t), 1.0);
   	
    //returning the casted t value as returner
    return returner;
}


//function used to create a circle
vec4 MCir(in vec2 fragCoord, in vec2 resolution)
{
    //creating a vec4 for later
    vec4 fragCircle;
    
    //gives us the pixel cordinate
    vec2 uv = fragCoord.xy/resolution;
    
    //creating the circles color
    vec4 color = vec4(uv, 0.54 , 1.0); 
    
    //setting uv -=0.5 to place the circle in the center of the screen
    uv -=0.5;
    
    uv.x *= resolution.x/resolution.y;
    
    //getting the diameter of the cirle
   	float diameter = length(uv);
    
    //setting the radius of the circle
    float radius = 0.3;
    
    //using smoothstep to create a smooth circle
    float circle = smoothstep(radius, radius -0.02, diameter);
    
    
    //casting the float circle to the vec4 fragCircle
    //This is done os that the circle data can be returned
    fragCircle = vec4(vec3(circle), 1.0);// + color;
    
    
    //returning the circle data
    return fragCircle;
}


// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec4 circle;
    
     circle = MCir(fragCoord, iResolution.xy);
    
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);
    

    //fragColor = vec4(uv.y, .8, .5, 1.0) + circle;
    
    
    //returning the col and and the cirle
    fragColor = calcColor(rayDirection, rayOrigin) + circle;
    
    
    //CLASS NOTES:
    
    //float a = 1.0 + 2.0; //single  parrallel op
    
    //be careful using conditionals, if-else, switch
    //make them efficent to avoid rollback
    //aka anytime something needs to be compared to something else
    //one way is to have simple if-else statements
    //if you can do the math yourself, this is better than using a conditional
    //use if statements if you need to use logic within your conditional
    //gpu not very good at conditionals or boolean logic
    
    
    //a turarary operator is one way to avoid conditional
    //also this is the sin function
    //float b = a < 0.0 ? -1.0: +1.0;
    //abs form of this is
    //float b = a < 0.0 > -a: +a;
    
    //if(a > 0)
    //{
        
    //} else
    //{
        
    //}
    
    //vec4 result = vec4(0.0);
    //int numSamples = 8;
    //int i = numSamples;
    //++i is faster since it doesn't copy the i var like i++
    //comments go from slowest to fastest in this section
    //for(i = 0; i < numSamples; i++)
    //for(i = 0; i < numSamples; ++i;)
    //for(i = numSamples - 1; i < 0; --i)
   // {
   //  	   result += vec4(float(i));
  //  }
    
    //looks wierd, but cut out forloop
    //does this 8 times just like forloop
    //is actually faster than forloop
    //also gpu will most likly read the forloop
    //like this anyway, but doing something known as unrolling
    //result+=addColor(--i);
    //result+=addColor(--i);
    //result+=addColor(--i);
    //result+=addColor(--i);
    //result+=addColor(--i);
    //result+=addColor(--i);
    //result+=addColor(--i);
    //result+=addColor(--i);
    
    
    //examples of faster multiplcation
    //if you know the power function don't use pow
    //if you don't know power funtion then use pow
    //float aSq = a*a; //pow(a,2.0), don't do this not efficent if you dont need
    //to use it
    //float aCubed = a* aSq;
    //float a4 = aSq * aSq;
    //fast way to square a;
    //only use when you don't need orginal a
    //a*=a;
 	//a*=a; //give you a ^ 4
    //a*=a; //gives you a ^ 8
    
    //better way is to make a function for what you need 
    //then pass it 
    //a = pow64(a);
    
    //square length of raydirection
    //never do this float lengSq = length(raydirection) * length(raydirection)
    //problem with thing above, 1: not algebraic
    //problem 2: given yourself 4 more operations that you don't need to do 
    //float lengSq = raydirection.x * raydirection.x +
        		  //raydirection.y * raydirection.y
        
    //more efficent than writting out    
    //float lengSq = dot(raydirection.x, rayDirection.y)
        
    //or do this
    //writing a function is usally just as fast as writting code in main
    //very useful orginzational technique 
    //float lengSq = lengthSqr2(rayDirection);
    
    
    //vec2 s = rayDirection.xy;
    
    
    
}
//dummy functions
/*vec4 addColor(int index, in vec4 data)
{
    //do something important
 	return vec4(float(data));   
}


float pow64(float x)
{
 	x*=x; //^2
    x*=x; //^4
    x*=x; //^8
    x*=x; //^16
    x*=x; //^32
    x*=x; //^64
    
    return x;
}

//getting sqr length of vec2-4 using dot
float lengthSqr2(in vec2 x)
{
 	return dot(x,x);   
}

float lengthSqr3(in vec3 x)
{
 	return dot(x,x);   
}

float lengthSqr4(in vec4 x)
{
 	return dot(x,x);   
}*/
