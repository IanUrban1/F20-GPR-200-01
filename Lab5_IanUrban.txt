// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

//maybe use sin, cos, or tan to morph the image
sCoord wave(float time, in sViewport vp, in sCoord center, sCoord ogLoc)
{
    //when past the channel color limit of 1 you have exceed that distance
    
    sCoord deformLoc = vp.viewportPoint.xy;
    
    //calculating the displacement
    sCoord displacementFromCenter = deformLoc - center;
    //calculating distance from center the displacement is
    float distanceFromCenter = length(displacementFromCenter);
    //0.5 + 0.5* the cos is just for dealing with negative values
    //dont have negative values so this is uneeded
    float cosWaveOffset = 0.5 + 0.5 * cos(time + distanceFromCenter);
    float sinWaveOffset = 0.5 + 0.5 * sin(time + distanceFromCenter);
    
    //find away to use this to change the orginal sampling coordinate
    
    //deformLoc = vp.uv;
    
    //center of image is (0,0)
    //deformLoc = displacementFromCenter;
    
    //deformLoc = vec2(distanceFromCenter, 1.0);
    //setting deformLoc to the casted offset of both sin and cos
    deformLoc = vec2(cosWaveOffset, sinWaveOffset);
    
    
    //zoom, higher numbers = more zoomed out, 
    //lower numbers = more zoomed in
    //moving image, if you want a millon little onesdo loc * 0.1 * iTime  
    //locpt2 = locpt2 + (0.5 * iTime) + res.x; // + res.x; //zoom + shift
    //adds a slow diagonal movement
    //we do time last
    //deformLoc += time * 0.00001; 
    
    
    return deformLoc;
    
}

sCoord ShadingLights(in sViewport vp, in sCoord center)
{
    sCoord shadeLight;
    
    shadeLight = vp.viewportPoint.xy;
    
    
    
    
    return shadeLight;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return vp.viewportPoint;
    
    //const color
    //return vec4(1.0, 0.0, 0.0, 1.0);
    
    
    
    //part 1 and setup
    //texture (full screen)
    //declaring sampler 
    //sCoord loc = vp.uv; //relative to display
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    
    sScalar ratio = res.y * vp.resolutionInv.y; 
    
    //a zoom is a multiplcation
    //for black hole thing set a point on the screen 
    //and have some multiplications 
    //and additions to morph the moving image
    sCoord loc = px/res; //relative to texture
    loc = ratio * loc; //+ 0.1 * iTime; //moving image, if you want a millon little onesdo loc * 0.1 * iTime  
    								// + res.x; //zoom + shift
    								//zoom, higher numbers = more zoomed out, 
    				 				//lower numbers = more zoomed in
    
    
    //return texture(iChannel0, loc);
    
    
    
    //part 2 - the Distortion effect
    
    //setting the center to be 0.0, 0.0
    vec2 center = vec2(0.0, 0.0);
    
    //creating a var for the orginal location
    vec2 ogLoc;
    
    //setup for part 2 (i have different var names cause it just
    //feels more organized
    sCoord pxPt2 = vp.pixelCoord;
    sDCoord resPt2 = iChannelResolution[0].xy; 
    sScalar ratioPt2 = resPt2.y * vp.resolutionInv.y;
    
    
    //creating a var to make effect relative to the texture
    sCoord relToText = pxPt2/resPt2;
    
    //finding orginal location coord
    ogLoc = ratioPt2 * relToText;
    
    //warp effect
    vec2 waveEffect = wave(iTime, vp, center, ogLoc);
    
    
    //sCoord locpt2 = ratio * loc;  
    
    //help me lord what on earth
    //so you can either do + or multiply
    //for plus is goes in a cirlce morhphin the image
    //for multiply well its well...intereting
    //well you can also do divide and umm its well a little painful to look at
    sCoord locpt2 = waveEffect + ogLoc;
    								        //zoom, higher numbers = more zoomed out, 
    //for final color				 		//lower numbers = more zoomed in
    return texture(iChannel0, locpt2);
    
    //for debugging
    //return vec4(locpt2, 0.0, 1.0);
    
    
    
    //part 3
    //setup for pt 3 vars
    sCoord locPt3;
    sCoord pxPt3 = vp.pixelCoord;
    sDCoord resPt3 = iChannelResolution[0].xy; 
    sScalar ratioPt3 = resPt2.y * vp.resolutionInv.y;
    
    return texture(iChannel0, locPt3);
    
    
    
    //test surface position and normal
    
    //return vp.viewportPoint;
    
    //return vec4(0.0, 0.0, 1.0, 1.0);
    
    //the normal have 1.0, for a wierd point use 0.0 after 
    //the vp.viewportPoint
    //return vec4(normalize(vec3(vp.viewportPoint.xy, 0.0)), 1.0);
    
    
    
    
    
    
    //part 4
    //cube map stuff
    //sampler type is 'samplerCube'
    vec3 cubeLoc = ray.direction.xyz;
    //3d rotation matrix
    //maybe use sin or cos XD, or map to mouse location
    //cubeLoc = rot * cubeLoc;
    //return vec4(cubeLoc, 1.0);
    //return texture(iChannel1, cubeLoc);
    
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}