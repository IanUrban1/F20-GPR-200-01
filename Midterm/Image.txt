// GLSL CODE BY DANIEL S. BUCKSTEIN
//  -> voidMainImage function

//------------------------------------------------------------
//Sources:
//https://www.lynda.com/Photoshop-tutorials/Photoshops-blending-formulas/91587/94263-4.html


//------------------------------------------------------------
//Calculating UV Function

//Didn't use sViewPort uv since I wanted my own
//local Image tab uv in case I wanted to make 
//small changes
sCoord calcUV(in sCoord uv, in sCoord fragCoord)
{
    //setting the pixelSize to the screen resolution
 	sCoord pixelSize = 1.0 / iChannelResolution[0].xy;
    
    
    // setup
    sCoord uvUpRight = (fragCoord + 1.0) * pixelSize;
    
    //finalized local uv coord
    uv = fragCoord / iChannelResolution[0].xy;   
    
    return uv;
}

//------------------------------------------------------------
//Setting the iChannel functions

vec4 chan0(in sCoord fragCoord)
{
    sCoord uv;
    
    uv = calcUV(uv, fragCoord);
    
    vec4 chan0 = texture(iChannel0, uv);
    
    return chan0;
}

vec4 chan1(in sCoord fragCoord)
{
    sCoord uv;
    
    uv = calcUV(uv, fragCoord);
    
    vec4 chan1 = texture(iChannel1, uv);
    
    return chan1;
}

vec4 chan2(in sCoord fragCoord)
{
    sCoord uv;
    
    uv = calcUV(uv, fragCoord);
    
    vec4 chan2 = texture(iChannel2, uv);
    
    return chan2;
}

vec4 chan3(in sCoord fragCoord)
{
    sCoord uv;
    
    uv = calcUV(uv, fragCoord);
    
    vec4 chan3 = texture(iChannel3, uv);
    
    return chan3;
}


//------------------------------------------------------------
//Composite functions

//Addition: Linear Dodge
//adds lumanice, although can produce clipping
//so be careful
vec4 linearDodge(in vec4 fragColor, in sCoord fragCoord)
{
    //grabbing the channels
    //doing this so user can chose what section
    //of the project they want to add the composite effect to
  	vec4 chan0 = chan0(fragCoord);
    vec4 chan1 = chan1(fragCoord);
    vec4 chan2 = chan2(fragCoord);
    vec4 chan3 = chan3(fragCoord);
    
    //generating the linear Dodge effect:
    fragColor = chan0 + chan1;
    
    //returning the linear Dodge
    return fragColor;
}

//function for the color dodge
vec4 colorDodge(in vec4 fragColor, in sCoord fragCoord)
{
    //grabbing the channels
    //doing this so user can chose what section
    //of the project they want to add the composite effect to
  	vec4 chan0 = chan0(fragCoord);
    vec4 chan1 = chan1(fragCoord);
    vec4 chan2 = chan2(fragCoord);
    vec4 chan3 = chan3(fragCoord);
    
    //generating the color Dodge effect
    fragColor = chan0 / (1.0-chan1);
    
    //returing the colorDodge effect
	return fragColor;
}

//Screen:
//inverse the multiply
//(chan1 + chan3) - (chan1 * chan3);
vec4 screenComposite(in vec4 fragColor, in sCoord fragCoord)
{
    //grabbing the channels
    //doing this so user can chose what section
    //of the project they want to add the composite effect to
  	vec4 chan0 = chan0(fragCoord);
    vec4 chan1 = chan1(fragCoord);
    vec4 chan2 = chan2(fragCoord);
    vec4 chan3 = chan3(fragCoord);
     
    //generating the screen effect:
    fragColor = (chan0 + chan1) - (chan0 * chan1);
    
    //returing the screen effect
	return fragColor;
}


//Linear burn:
//adds lumanice, but sinks the sum
//generates a very dark image
vec4 linearBurn(in vec4 fragColor, in sCoord fragCoord)
{
    //grabbing the channels
    //doing this so user can chose what section
    //of the project they want to add the composite effect to
  	vec4 chan0 = chan0(fragCoord);
    vec4 chan1 = chan1(fragCoord);
    vec4 chan2 = chan2(fragCoord);
    vec4 chan3 = chan3(fragCoord);
 	   
    //generating the linear burn effect:
    fragColor = chan0 + chan1 - 1.0;
    
    //returining the linear burn effect
    return fragColor;
}
 
    
//Multiplacation:
//use multiplication evenly darken everything
vec4 multiplacationComposite(in vec4 fragColor, in sCoord fragCoord)
{
    //grabbing the channels
    //doing this so user can chose what section
    //of the project they want to add the composite effect to
  	vec4 chan0 = chan0(fragCoord);
    vec4 chan1 = chan1(fragCoord);
    vec4 chan2 = chan2(fragCoord);
    vec4 chan3 = chan3(fragCoord);
    
    //generating the multiplication effect
    fragColor = chan0 * chan3;
 	 
    //returning the multiplication effect
    return fragColor;
}


//Max:
//use max to lighten texture
//fragColor = max(chan1, chan3);
vec4 maxComposite(in vec4 fragColor, in sCoord fragCoord)
{
    //grabbing the channels
    //doing this so user can chose what section
    //of the project they want to add the composite effect to
  	vec4 chan0 = chan0(fragCoord);
    vec4 chan1 = chan1(fragCoord);
    vec4 chan2 = chan2(fragCoord);
    vec4 chan3 = chan3(fragCoord);
    
    //generating the max effect
    fragColor = max(chan0, chan1);
 	 
    //returning the max effectt
    return fragColor;
}

//Min:
//use min to darken texture
vec4 minComposite(in vec4 fragColor, in sCoord fragCoord)
{
    //grabbing the channels
    //doing this so user can chose what section
    //of the project they want to add the composite effect to
  	vec4 chan0 = chan0(fragCoord);
    vec4 chan1 = chan1(fragCoord);
    vec4 chan2 = chan2(fragCoord);
    vec4 chan3 = chan3(fragCoord);
    
    //generating the min effect:
    fragColor = min(chan0, chan1);
 	 
    //returning the min effect
    return fragColor;
}

//Mix
//fragColor = mix(chan1, chan3, 0.5);
vec4 mixComposite(in vec4 fragColor, in sCoord fragCoord)
{
    //grabbing the channels
    //doing this so user can chose what effects generated throughout
    //the project they want to add the composite effect to
  	vec4 chan0 = chan0(fragCoord);
    vec4 chan1 = chan1(fragCoord);
    vec4 chan2 = chan2(fragCoord);
    vec4 chan3 = chan3(fragCoord);
    
    //generating the mix effect:
    fragColor = mix(chan0, chan1, 0.5);
 	 
    //returning the mix effect:
    return fragColor;
}


// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    //creating a local uv so it can be used
    //in the addtion of composite effects
    sCoord uv;
    
    //setting the local/temp to 
    //the Image-tab calculated uv
     uv = calcUV(uv, fragCoord);
     
    //adding a linear dodge composite effect
    //adds lumanice, although can produce clipping
	//so be careful
 	vec4 linearDodge = linearDodge(fragColor, fragCoord);
    
    //fragColor = linearDodge;
    //The music visualizer and linear dodge effet:
    //fragColor = chan3(fragCoord) + linearDodge;
    
    
    //adding a color dodge
    //this effect can produce clipping so be careful
	vec4 colDodge = colorDodge(fragColor, fragCoord);
    
    //fragColor = colDodge;
    //The music visualizer and color dodge effet:
    //fragColor = chan3(fragCoord) + colorDodge;
    
    //adding a darken effect using the minComposite function
    //use min to darken texture
    vec4 minComp = minComposite(fragColor, fragCoord);
    
    //fragColor = minComp;
    //The music visualizer and min composite effet:
    //fragColor = chan3(fragCoord) + minComp;
    
    ////adding a brigten effect using the minComposite function
    //use max to lighten texture
    vec4 maxComp = maxComposite(fragColor, fragCoord);
    
    //fragColor = maxComp;
    //The music visualizer and max composite effet:
    //fragColor = chan3(fragCoord) + maxComp;
    
    
    //adding a darken effect using the minComposite function
    //use min to darken texture
    vec4 mixComp = mixComposite(fragColor, fragCoord);
    
    //fragColor = mixComp;
    //The music visualizer and mix composite effet:
    //fragColor = chan3(fragCoord) + mixComp;
   
    
    //Multiplacation:
    //adding an evenly darkend texture
	//use multiplication evenly darken everything
   	vec4 multiComp = multiplacationComposite(fragColor, fragCoord);
    
    //fragColor = multiComp;
    //The music visualizer and multipication composite effet:
    //fragColor = chan3(fragCoord) + multiComp;
    
    //Linear burn:
	//adds lumanice, but sinks the sum
	//generates a very dark image
	vec4 linBurn = linearBurn(fragColor, fragCoord);
    
    //fragColor = linBurn;
    //The music visualizer and linear burn effet:
    //fragColor = chan3(fragCoord) + linBurn;
    
    
    //Screen:
	//inverse the multiply
	//(chan1 + chan3) - (chan1 * chan3);
	vec4 screenComp = screenComposite(fragColor, fragCoord);
    
    //fragColor = screenComp; 
     //The music visualizer and screen composite effet:
    //fragColor = chan3(fragCoord) + screenComp;
    
    //just the music visualizer:
    //fragColor = chan3(fragCoord);
    fragColor = chan3(fragCoord) + linearDodge;
}
