//sources used: 
//https://ebookcentral-proquest-com.cobalt.champlain.edu/lib/champlain/reader.action?docID=948515

//sources used: 
//https://ebookcentral-proquest-com.cobalt.champlain.edu/lib/champlain/reader.action?docID=948515


//Notes from lab6 note class
//for brightpass you figure out which pixels are the brightest
//to do this use lumans, or how bright something is, use wikipedia on lumans
//for background info
//relative lumanice
//use red, green, and blue to find out how bright a certain pixel is, shown below
//in the luma function
//all the of the rgb values add up to one
//to keep color and just dim use multiply, but this will darken the scene
//u can keep making the scene darker you can keep multiplying
//smoothstep keyword = x * x * (3-2x);
//you can also square x it more efficent then to make it even more efficent
//call the function that squares x and square x 
//again -> squareFunction(float x){ return x*x;}
//call again -> squareFunction(x*x);
//thus instead of using clamp use smoothstep


//bright pass effect
float luma(vec3 color)
{
    //creating local var to store 
    //the vec3 color red value
    float lumaRed = 0.2126 * color.r;
    
    //creating local var to store 
    //the vec3 color green value
    float lumaGreen = 0.7152 * color.g;
    
    //creating local var to store 
    //the vec3 color blue value
    float lumaBlue = 0.0722 * color.b;
    
   	//add all of those values and then returning them
 	return lumaRed + lumaGreen + lumaBlue; 
}


//brightpass
vec4 pass1(in sViewport vp)
{
    //creating lumThresh var
    float lumThresh = 0.5;
    
    //grabbing texture from iChannel0 and its uv
    vec4 val = texture(iChannel0, vp.uv);
    
    //using clamp and lumThresh to find and illuminate all
    //brighter sections of the cubemap
    return val * clamp(luma(val.rgb) - lumThresh, 0.0, 1.0) * (1.0 / (1.0 - lumThresh));
}

//gausin blur
//first blur pass
//pass2 uses the weighted vertical sum of the Gaussian blur operation, 
//and stores the results in yet another texture.  
vec4 pass2(in sViewport vp)
{
    
    //height of screen in pixels
    float height = 800.0;
    
    //(dy is the height of a texel in texture coordinates.)
    float dy = 1.0 / height;
    
    //offsets for Gaussian blur
    //the array of offsets from the pixel being blured
    //We read pixels from the texture created in the first pass,
	//offset in the vertical direction by the amounts in the PixOffset array.
	float PixOffset[10] =
	float[](0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);
    
    //weights Gaussian blur
    //an array of normalized Gaussin weights	
    float Weight[10] = float[](0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25);
    
    //We sum using weights from the Weight array.
    vec4 sum = texture(iChannel0, vp.uv) * Weight[0];
    for(int i = 1; i < 10; i++)
    {
        //We sum in both directions at the same time, 
		//a distance of four pixels in each vertical direction.
     	sum += texture(iChannel0, vp.uv + vec2(0.0, PixOffset[i]) * dy) * Weight[i];
        
        sum += texture(iChannel0, vp.uv - vec2(0.0, PixOffset[i]) * dy) * Weight[i];
        
    }
    //returning the calculated sum of the directions 
    return sum;
}


void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
   	//pass the first blur
    fragColor += pass2(vp);
}